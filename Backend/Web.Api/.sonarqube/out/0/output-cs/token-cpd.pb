 
XC:\Users\hienv\OneDrive\Desktop\NVHIEN\DoAnTotNghiep\Backend\Web.Caching\IRedisCached.cs
	namespace 	
Web
 
. 
Caching 
{ 
public 

	interface 
IRedisCached !
{		 
bool 
Set 
< 
T 
> 
( 
string 
key 
, 
T  !
value" '
,' (
double) /
?/ 0
absoluteExpiration1 C
=D E
nullF J
)J K
;K L
T 	
Get
 
< 
T 
> 
( 
string 
key 
) 
; 
Task$$ 
<$$ 
bool$$ 
>$$ 
SetAsync$$ 
<$$ 
T$$ 
>$$ 
($$ 
string$$ %
key$$& )
,$$) *
T$$+ ,
value$$- 2
,$$2 3
double$$4 :
?$$: ;
absoluteExpiration$$< N
=$$O P
null$$Q U
)$$U V
;$$V W
Task-- 
<-- 
T-- 
>-- 
GetAsync-- 
<-- 
T-- 
>-- 
(-- 
string-- "
key--# &
)--& '
;--' (
void// 
Remove// 
(// 
string// 
key// 
)// 
;//  
Task00 
RemoveAsync00 
(00 
string00 
key00  #
)00# $
;00$ %
}11 
}22 ôM
VC:\Users\hienv\OneDrive\Desktop\NVHIEN\DoAnTotNghiep\Backend\Web.Caching\RedisCahed.cs
	namespace 	
Web
 
. 
Caching 
{ 
public		 

class		 

RedisCahed		 
:		 
IRedisCached		 *
{

 
IDistributedCache 
_cached !
;! "
public 

RedisCahed 
( 
IDistributedCache +
cached, 2
)2 3
{ 	
_cached 
= 
cached 
; 
} 	
public 
T 
Get 
< 
T 
> 
( 
string 
key "
)" #
{ 	
T 
result 
= 
default 
( 
T  
)  !
;! "
try!! 
{"" 
byte$$ 
[$$ 
]$$ 
cachedBytes$$ "
=$$# $
_cached$$% ,
.$$, -
Get$$- 0
($$0 1
key$$1 4
)$$4 5
;$$5 6
if%% 
(%% 
cachedBytes%% 
!=%% !
null%%" &
)%%& '
{&& 
string'' 
jsonText'' #
=''$ %
Encoding''& .
.''. /
UTF8''/ 3
.''3 4
	GetString''4 =
(''= >
cachedBytes''> I
)''I J
;''J K
result(( 
=(( 
JsonSerializer(( +
.((+ ,
Deserialize((, 7
<((7 8
T((8 9
>((9 :
(((: ;
jsonText((; C
)((C D
;((D E
})) 
}** 
catch++ 
(++ 
	Exception++ 
ex++ 
)++  
{,, 
throw.. 
(.. 
ex.. 
).. 
;.. 
}// 
return00 
result00 
;00 
}11 	
public33 
async33 
Task33 
<33 
T33 
>33 
GetAsync33 %
<33% &
T33& '
>33' (
(33( )
string33) /
key330 3
)333 4
{44 	
T55 
result55 
=55 
default55 
(55 
T55  
)55  !
;55! "
try77 
{88 
byte:: 
[:: 
]:: 
cachedBytes:: "
=::# $
await::% *
_cached::+ 2
.::2 3
GetAsync::3 ;
(::; <
key::< ?
)::? @
;::@ A
if;; 
(;; 
cachedBytes;; 
!=;;  "
null;;# '
);;' (
{<< 
string== 
jsonText== #
===$ %
Encoding==& .
.==. /
UTF8==/ 3
.==3 4
	GetString==4 =
(=== >
cachedBytes==> I
)==I J
;==J K
result>> 
=>> 
JsonSerializer>> +
.>>+ ,
Deserialize>>, 7
<>>7 8
T>>8 9
>>>9 :
(>>: ;
jsonText>>; C
)>>C D
;>>D E
}?? 
}@@ 
catchAA 
(AA 
	ExceptionAA 
exAA 
)AA  
{BB 
throwDD 
(DD 
exDD 
)DD 
;DD 
}EE 
returnFF 
resultFF 
;FF 
}GG 	
publicMM 
voidMM 
RemoveMM 
(MM 
stringMM !
keyMM" %
)MM% &
{NN 	
tryOO 
{PP 
_cachedQQ 
.QQ 
RemoveQQ 
(QQ 
keyQQ "
)QQ" #
;QQ# $
}RR 
catchSS 
(SS 
	ExceptionSS 
exSS 
)SS  
{TT 
throwVV 
(VV 
exVV 
)VV 
;VV 
}WW 
}XX 	
publicZZ 
asyncZZ 
TaskZZ 
RemoveAsyncZZ %
(ZZ% &
stringZZ& ,
keyZZ- 0
)ZZ0 1
{[[ 	
try\\ 
{]] 
await^^ 
_cached^^ 
.^^ 
RemoveAsync^^ )
(^^) *
key^^* -
)^^- .
;^^. /
}__ 
catch`` 
(`` 
	Exception`` 
ex`` 
)``  
{aa 
throwbb 
(bb 
exbb 
)bb 
;bb 
}cc 
}dd 	
publicnn 
boolnn 
Setnn 
<nn 
Tnn 
>nn 
(nn 
stringnn !
keynn" %
,nn% &
Tnn' (
valuenn) .
,nn. /
doublenn0 6
?nn6 7
absoluteExpirationnn8 J
=nnK L
nullnnM Q
)nnQ R
{oo 	
boolpp 
resultpp 
=pp 
falsepp 
;pp  
tryqq 
{rr 
stringtt 
jsonTexttt 
=tt  !
JsonSerializertt" 0
.tt0 1
	Serializett1 :
(tt: ;
valuett; @
)tt@ A
;ttA B
byteuu 
[uu 
]uu 

cacheBytesuu !
=uu" #
Encodinguu$ ,
.uu, -
UTF8uu- 1
.uu1 2
GetBytesuu2 :
(uu: ;
jsonTextuu; C
)uuC D
;uuD E
ifvv 
(vv 
absoluteExpirationvv %
!=vv' )
nullvv* .
&&vv/ 1
absoluteExpirationvv2 D
.vvD E
HasValuevvE M
&&vvN P
absoluteExpirationvvQ c
.vvc d
Valuevvd i
>vvj k
$numvvl m
)vvm n
{ww (
DistributedCacheEntryOptionsxx 0
optionsxx1 8
=xx9 :
newxx; >(
DistributedCacheEntryOptionsxx? [
(xx[ \
)xx\ ]
{yy +
AbsoluteExpirationRelativeToNowzz 7
=zz8 9
TimeSpanzz: B
.zzB C
FromSecondszzC N
(zzN O
absoluteExpirationzzO a
.zza b
Valuezzb g
)zzg h
}{{ 
;{{ 
_cached|| 
.|| 
Set|| 
(||  
key||  #
,||# $

cacheBytes||% /
,||/ 0
options||0 7
)||7 8
;||8 9
}}} 
else~~ 
{ 
_cached
ÄÄ 
.
ÄÄ 
Set
ÄÄ 
(
ÄÄ  
key
ÄÄ  #
,
ÄÄ# $

cacheBytes
ÄÄ% /
)
ÄÄ/ 0
;
ÄÄ0 1
}
ÅÅ 
result
ÑÑ 
=
ÑÑ 
true
ÑÑ 
;
ÑÑ 
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá 
throw
àà 
(
àà 
ex
àà 
)
àà 
;
àà 
}
ââ 
return
ää 
result
ää 
;
ää 
}
ãã 	
public
çç 
async
çç 
Task
çç 
<
çç 
bool
çç 
>
çç 
SetAsync
çç  (
<
çç( )
T
çç) *
>
çç* +
(
çç+ ,
string
çç, 2
key
çç3 6
,
çç6 7
T
çç8 9
value
çç: ?
,
çç? @
double
ççA G
?
ççG H 
absoluteExpiration
ççI [
=
çç\ ]
null
çç^ b
)
ççb c
{
éé 	
bool
èè 
result
èè 
=
èè 
false
èè 
;
èè  
try
êê 
{
ëë 
string
ìì 
jsonText
ìì 
=
ìì  !
JsonSerializer
ìì" 0
.
ìì0 1
	Serialize
ìì1 :
(
ìì: ;
value
ìì; @
)
ìì@ A
;
ììA B
byte
îî 
[
îî 
]
îî 

cacheBytes
îî !
=
îî" #
Encoding
îî$ ,
.
îî, -
UTF8
îî- 1
.
îî1 2
GetBytes
îî2 :
(
îî: ;
jsonText
îî; C
)
îîC D
;
îîD E
if
ïï 
(
ïï  
absoluteExpiration
ïï &
!=
ïï' )
null
ïï* .
&&
ïï/ 1 
absoluteExpiration
ïï2 D
.
ïïD E
HasValue
ïïE M
&&
ïïN P 
absoluteExpiration
ïïQ c
.
ïïc d
Value
ïïd i
>
ïïj k
$num
ïïl m
)
ïïm n
{
ññ *
DistributedCacheEntryOptions
óó 0
options
óó1 8
=
óó9 :
new
óó; >*
DistributedCacheEntryOptions
óó? [
(
óó[ \
)
óó\ ]
{
òò -
AbsoluteExpirationRelativeToNow
ôô 7
=
ôô8 9
TimeSpan
ôô: B
.
ôôB C
FromSeconds
ôôC N
(
ôôN O 
absoluteExpiration
ôôO a
.
ôôa b
Value
ôôb g
)
ôôg h
}
öö 
;
öö 
await
õõ 
_cached
õõ !
.
õõ! "
SetAsync
õõ" *
(
õõ* +
key
õõ+ .
,
õõ. /

cacheBytes
õõ0 :
,
õõ: ;
options
õõ< C
)
õõC D
;
õõD E
}
úú 
else
ùù 
{
ûû 
await
üü 
_cached
üü !
.
üü! "
SetAsync
üü" *
(
üü* +
key
üü+ .
,
üü. /

cacheBytes
üü0 :
)
üü: ;
;
üü; <
}
†† 
result
££ 
=
££ 
true
££ 
;
££ 
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
throw
ßß 
(
ßß 
ex
ßß 
)
ßß 
;
ßß 
}
®® 
return
©© 
result
©© 
;
©© 
}
™™ 	
}
¨¨ 
}≠≠ ∑
WC:\Users\hienv\OneDrive\Desktop\NVHIEN\DoAnTotNghiep\Backend\Web.Caching\RedisConfig.cs
	namespace 	
Web
 
. 
Caching 
{ 
public 

class 
RedisConfig 
{ 
public		 
string		 
ConnectionString		 &
{		' (
get		) ,
;		, -
set		. 1
;		1 2
}		3 4
=		5 6
$str		7 K
;		K L
public

 
string

 
Port

 
{

 
get

  
;

  !
set

" %
;

% &
}

' (
=

) *
$str

+ 1
;

1 2
} 
} è
fC:\Users\hienv\OneDrive\Desktop\NVHIEN\DoAnTotNghiep\Backend\Web.Caching\ServiceCollectionExtension.cs
	namespace 	
Web
 
. 
Caching 
{ 
public 

static 
class &
ServiceCollectionExtension 2
{		 
public

 
static

 
IServiceCollection

 ( 
AddRedisCahedService

) =
(

= >
this

> B
IServiceCollection

C U
services

V ^
)

^ _
{ 	
services 
. 
AddSingleton !
<! "
IDistributedCache" 3
,3 4

RedisCache5 ?
>? @
(@ A
)A B
;B C
services 
. 
AddTransient !
<! "
IRedisCached" .
,. /

RedisCahed0 :
>: ;
(; <
)< =
;= >
return 
services 
; 
} 	
} 
} 