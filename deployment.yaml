# kubectl apply -f deployment.yaml
# kubectl delete deployment redis-deployment rediscommander-deployment mongo-deployment -n mta
# kubectl delete svc redis-service rediscommander-service mongo-service
# kubectl get pod -n mta
# kubectl get svc
# kubectl get deployment -n mta -o wide
# apiVersion: apps/v1
# kind: Deployment 
# metadata:
#   name: redis-deployment
#   namespace: mta
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: redis-dev
#   template:
#     metadata:
#       labels:
#         app: redis-dev
#     spec:
#       containers:
#       - image: redis
#         name: redis-container
#         ports:
#           - containerPort: 6379
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: redis-service
# spec:
#   selector:
#     app: redis-dev
#   ports:
#   - port: 6379
#     targetPort: 6379

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: mta
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mongo-dev
  template:
    metadata:
      labels:
        app: mongo-dev
    spec:
      containers:
      - image: mongo
        name: mongo-container
        ports:
          - containerPort: 27017
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  selector:
    app: mongo-dev
  ports:
  - name: "80"
    port: 27017
    targetPort: 27017
---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: rediscommander-deployment
#   namespace: mta
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: rediscommander-dev
#   template:
#     metadata:
#       labels:
#         app: rediscommander-dev
#     spec:
#       containers:
#       - image: rediscommander/redis-commander
#         name: rediscommander-container
#         ports:
#           - containerPort: 80
#             protocol: TCP
# --- 
# apiVersion: v1
# kind: Service
# metadata:
#   name: rediscommander-service
# spec:
#   selector:
#     app: rediscommander-dev
#   ports:
#   - port: 80
#     targetPort: 8081